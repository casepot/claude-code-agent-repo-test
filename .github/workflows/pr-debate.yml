name: Multi-Agent PR Debate
on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to analyze'
        required: true
        type: number
      owner:
        description: 'The owner of the repository to analyze (e.g., "casepot")'
        required: true
      repo:
        description: 'The name of the repository to analyze (e.g., "agent-test-calculator")'
        required: true

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write
  id-token: write

jobs:
  check-trigger:
    name: Check Debate Trigger
    runs-on: ubuntu-latest
    outputs:
      should_debate: ${{ steps.check.outputs.should_debate }}
      pr_number: ${{ steps.check.outputs.pr_number }}
      debate_id: ${{ steps.check.outputs.debate_id }}
      owner: ${{ steps.check.outputs.owner }}
      repo: ${{ steps.check.outputs.repo }}
    steps:
      - name: Check trigger conditions
        id: check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.EXTERNAL_REPO_PAT }}
          script: |
            core.setOutput('should_debate', true);
            core.setOutput('pr_number', '${{ github.event.inputs.pr_number }}');
            core.setOutput('debate_id', `debate-${{ github.event.inputs.pr_number }}-${Date.now()}`);
            core.setOutput('owner', '${{ github.event.inputs.owner }}');
            core.setOutput('repo', '${{ github.event.inputs.repo }}');

  prepare-context:
    name: Prepare Debate Context
    needs: check-trigger
    if: needs.check-trigger.outputs.should_debate == 'true'
    runs-on: ubuntu-latest
    outputs:
      context: ${{ steps.build.outputs.context }}
      participants: ${{ steps.identify.outputs.participants }}
      head_sha: ${{ steps.build.outputs.head_sha }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: '${{ needs.check-trigger.outputs.owner }}/${{ needs.check-trigger.outputs.repo }}'
          ref: 'refs/pull/${{ needs.check-trigger.outputs.pr_number }}/head'
          token: ${{ secrets.EXTERNAL_REPO_PAT }}
          fetch-depth: 0
          
      - name: Build context
        id: build
        env:
          GH_TOKEN: ${{ secrets.EXTERNAL_REPO_PAT }}
        run: |
          PR_NUMBER=${{ needs.check-trigger.outputs.pr_number }}
          REPO_FLAG="-R ${{ needs.check-trigger.outputs.owner }}/${{ needs.check-trigger.outputs.repo }}"
          
          # Get PR diff
          git diff HEAD^1 > /tmp/pr.diff
          
          # Get PR metadata
          gh pr view $PR_NUMBER --json title,body,author,labels,files,headRefOid $REPO_FLAG > /tmp/pr-meta.json
          
          # Get recent commit messages
          git log -n 5 --pretty=format:%s > /tmp/commits.txt
          
          # Build context file
          cat > /tmp/context.md << 'EOF'
          # PR Context
          
          ## Metadata
          $(cat /tmp/pr-meta.json | jq -r '"Title: \(.title)\nAuthor: \(.author.login)\nLabels: \(.labels[].name // "none")"')
          
          ## Changed Files
          $(cat /tmp/pr-meta.json | jq -r '.files[].path')
          
          ## Recent Commits
          $(cat /tmp/commits.txt)
          
          ## Diff Summary
          $(head -n 500 /tmp/pr.diff)
          EOF
          
          # Output context
          echo "context<<EOF" >> $GITHUB_OUTPUT
          cat /tmp/context.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Output head SHA
          HEAD_SHA=$(cat /tmp/pr-meta.json | jq -r '.headRefOid')
          echo "head_sha=$HEAD_SHA" >> $GITHUB_OUTPUT
          
      - name: Identify participants
        id: identify
        run: |
          echo 'participants={"stakeholders": ["security_analyst"], "maintainers": ["quality"]}' >> $GITHUB_OUTPUT

  stakeholder-analysis:
    name: Stakeholder Analysis
    needs: [check-trigger, prepare-context]
    if: needs.check-trigger.outputs.should_debate == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        stakeholder: ${{ fromJSON(needs.prepare-context.outputs.participants).stakeholders }}
      max-parallel: 5
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.EXTERNAL_REPO_PAT }}
      
      - name: Prepare stakeholder prompt
        id: prep_prompt
        run: |
          CONTEXT_FILE=/tmp/context.md
          echo "${{ needs.prepare-context.outputs.context }}" > $CONTEXT_FILE
          
          PROMPT_TEMPLATE_FILE=.github/claude/prompts/stakeholders/${{ matrix.stakeholder }}.md
          
          FINAL_PROMPT_FILE=/tmp/final-prompt-${{ matrix.stakeholder }}.md
          
          cat $PROMPT_TEMPLATE_FILE > $FINAL_PROMPT_FILE
          echo "\n\n---\n\n" >> $FINAL_PROMPT_FILE
          echo "**PR CONTEXT:**" >> $FINAL_PROMPT_FILE
          cat $CONTEXT_FILE >> $FINAL_PROMPT_FILE
          
          echo "prompt_path=$FINAL_PROMPT_FILE" >> $GITHUB_OUTPUT

      - name: Run stakeholder analysis
        id: analysis
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt_file: ${{ steps.prep_prompt.outputs.prompt_path }}
          max_turns: "1"
          
      - name: Post stakeholder comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const executionFile = '${{ steps.analysis.outputs.execution_file }}';
            const executionLog = JSON.parse(fs.readFileSync(executionFile, 'utf8'));
            // The actual analysis is in the 'result' field of the last log entry
            const analysis = executionLog[executionLog.length - 1].result || "No analysis provided.";
            const stakeholder = '${{ matrix.stakeholder }}';
            const debateId = '${{ needs.check-trigger.outputs.debate_id }}';
            
            await github.rest.issues.createComment({
              owner: '${{ needs.check-trigger.outputs.owner }}',
              repo: '${{ needs.check-trigger.outputs.repo }}',
              issue_number: ${{ needs.check-trigger.outputs.pr_number }},
              body: `## 🤖 ${stakeholder} Analysis\n\n_Debate ID: ${debateId}_\n\n${analysis}`
            });

  collect-arguments:
    name: Collect Stakeholder Arguments
    needs: [check-trigger, stakeholder-analysis]
    if: needs.check-trigger.outputs.should_debate == 'true'
    runs-on: ubuntu-latest
    outputs:
      arguments_summary: ${{ steps.collect.outputs.summary }}
    steps:
      - name: Collect all stakeholder comments
        id: collect
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ needs.check-trigger.outputs.pr_number }};
            const debateId = '${{ needs.check-trigger.outputs.debate_id }}';
            
            // Get all comments from this debate
            const { data: comments } = await github.rest.issues.listComments({
              owner: '${{ needs.check-trigger.outputs.owner }}',
              repo: '${{ needs.check-trigger.outputs.repo }}',
              issue_number: prNumber
            });
            
            // Filter for stakeholder comments from this debate
            const stakeholderComments = comments.filter(c =>
              c.body.includes(debateId) &&
              c.body.includes('🤖') &&
              c.body.includes('Analysis')
            );
            
            // Build summary
            let summary = '# Stakeholder Arguments Summary\n\n';
            for (const comment of stakeholderComments) {
              summary += comment.body + '\n\n---\n\n';
            }
            
            core.setOutput('summary', summary);

  maintainer-deliberation:
    name: Maintainer Deliberation
    needs: [check-trigger, prepare-context, collect-arguments]
    if: needs.check-trigger.outputs.should_debate == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        maintainer: ${{ fromJSON(needs.prepare-context.outputs.participants).maintainers }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: 'refs/pull/${{ needs.check-trigger.outputs.pr_number }}/head'
          repository: '${{ needs.check-trigger.outputs.owner }}/${{ needs.check-trigger.outputs.repo }}'
          token: ${{ secrets.EXTERNAL_REPO_PAT }}
      
      - name: Prepare maintainer prompt
        id: prep_prompt
        run: |
          CONTEXT_FILE=/tmp/context.md
          echo "${{ needs.prepare-context.outputs.context }}" > $CONTEXT_FILE
          
          ARGUMENTS_FILE=/tmp/arguments.md
          echo "${{ needs.collect-arguments.outputs.arguments_summary }}" > $ARGUMENTS_FILE
          
          PROMPT_TEMPLATE_FILE=.github/claude/prompts/maintainers/${{ matrix.maintainer }}.md
          
          FINAL_PROMPT_FILE=/tmp/final-prompt-${{ matrix.maintainer }}.md
          
          cat $PROMPT_TEMPLATE_FILE > $FINAL_PROMPT_FILE
          echo "\n\n---\n\n" >> $FINAL_PROMPT_FILE
          echo "**STAKEHOLDER ARGUMENTS:**" >> $FINAL_PROMPT_FILE
          cat $ARGUMENTS_FILE >> $FINAL_PROMPT_FILE
          echo "\n\n---\n\n" >> $FINAL_PROMPT_FILE
          echo "**PR CONTEXT:**" >> $FINAL_PROMPT_FILE
          cat $CONTEXT_FILE >> $FINAL_PROMPT_FILE
          
          echo "prompt_path=$FINAL_PROMPT_FILE" >> $GITHUB_OUTPUT

      - name: Run maintainer review
        id: review
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt_file: ${{ steps.prep_prompt.outputs.prompt_path }}
          max_turns: "1"
          
      - name: Save maintainer decision
        run: |
          mkdir -p /tmp/decisions
          echo "${{ steps.review.outputs.result }}" > /tmp/decisions/maintainer-${{ matrix.maintainer }}.md
          
      - name: Upload decision artifact
        uses: actions/upload-artifact@v4
        with:
          name: maintainer-decision-${{ matrix.maintainer }}
          path: /tmp/decisions/maintainer-${{ matrix.maintainer }}.md

  consensus-decision:
    name: Consensus Decision
    needs: [check-trigger, prepare-context, maintainer-deliberation]
    if: needs.check-trigger.outputs.should_debate == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.EXTERNAL_REPO_PAT }}
      
      - name: Download all maintainer decisions
        uses: actions/download-artifact@v4
        with:
          pattern: maintainer-decision-*
          merge-multiple: true
          path: /tmp/decisions
          
      - name: Calculate consensus
        id: consensus
        run: |
          # Parse maintainer decisions and calculate weighted consensus
          # This is simplified - real implementation would parse structured decisions
          
          APPROVE_COUNT=0
          REJECT_COUNT=0
          MODIFY_COUNT=0
          
          for decision in /tmp/decisions/*.md; do
            if grep -qi "APPROVE" "$decision"; then
              APPROVE_COUNT=$((APPROVE_COUNT + 1))
            elif grep -qi "REJECT" "$decision"; then
              REJECT_COUNT=$((REJECT_COUNT + 1))
            else
              MODIFY_COUNT=$((MODIFY_COUNT + 1))
            fi
          done
          
          TOTAL=$((APPROVE_COUNT + REJECT_COUNT + MODIFY_COUNT))
          
          if [ $TOTAL -eq 0 ]; then
            echo "decision=no_consensus" >> $GITHUB_OUTPUT
            echo "consensus_score=0" >> $GITHUB_OUTPUT
          else
            CONSENSUS_SCORE=$((APPROVE_COUNT * 100 / TOTAL))
            echo "consensus_score=$CONSENSUS_SCORE" >> $GITHUB_OUTPUT
            
            if [ $CONSENSUS_SCORE -ge 80 ]; then
              echo "decision=approve" >> $GITHUB_OUTPUT
            elif [ $CONSENSUS_SCORE -ge 50 ]; then
              echo "decision=modify" >> $GITHUB_OUTPUT
            else
              echo "decision=reject" >> $GITHUB_OUTPUT
            fi
          fi
          
      - name: Post final decision
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const decision = '${{ steps.consensus.outputs.decision }}';
            const score = '${{ steps.consensus.outputs.consensus_score }}';
            const debateId = '${{ needs.check-trigger.outputs.debate_id }}';
            
            let emoji = '❓';
            let status = 'pending';
            
            switch(decision) {
              case 'approve':
                emoji = '✅';
                status = 'success';
                break;
              case 'reject':
                emoji = '❌';
                status = 'failure';
                break;
              case 'modify':
                emoji = '🔧';
                status = 'pending';
                break;
            }
            
            const body = `## ${emoji} Debate Conclusion
            
            **Debate ID**: ${debateId}
            **Decision**: ${decision.toUpperCase()}
            **Consensus Score**: ${score}%
            
            The multi-agent review has completed. Please review the feedback above and make necessary adjustments.`;
            
            await github.rest.issues.createComment({
              owner: '${{ needs.check-trigger.outputs.owner }}',
              repo: '${{ needs.check-trigger.outputs.repo }}',
              issue_number: ${{ needs.check-trigger.outputs.pr_number }},
              body: body
            });
            
            // Update PR status check
            await github.rest.repos.createCommitStatus({
              owner: '${{ needs.check-trigger.outputs.owner }}',
              repo: '${{ needs.check-trigger.outputs.repo }}',
              sha: '${{ needs.prepare-context.outputs.head_sha }}',
              state: status,
              context: 'agent-debate',
              description: `Consensus: ${score}% - ${decision}`
            });